{"meta":{"title":"Momentonly","subtitle":"或有或无，都没什么了吧","description":null,"author":"Moment Only","url":"http://yoursite.com"},"pages":[{"title":"","date":"2018-12-31T06:06:59.363Z","updated":"2018-12-31T06:06:59.363Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"123layout: categoriestitle: categories ---"},{"title":"","date":"2018-12-31T06:06:40.300Z","updated":"2018-12-31T06:06:40.300Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"123layout: tagstitle: tags ---"}],"posts":[{"title":"Java理解  子类成员变量与父类成员变量同名     方法的重写","slug":"成员变量的同名和方法的重写","date":"2019-01-17T14:53:34.000Z","updated":"2019-01-18T03:11:55.968Z","comments":true,"path":"2019/01/17/成员变量的同名和方法的重写/","link":"","permalink":"http://yoursite.com/2019/01/17/成员变量的同名和方法的重写/","excerpt":"","text":"1.子类父类成员变量同名1.子类的成员变量与父类成员变量同名时,在子类中父类成员变量被”隐藏”2.要想访问与父类的同名的成员变量, 两种方法 ①: 在子类中是用 super ②:将该变量强转成父类的类 3.对象是什么类型的(不是new的那个类型), 成员变量是什么类型. 2.子类对父类方法的重写子类的方法与父类的方法重名时(我们讲得是重写的情况, 方法名一致, 形参一致, 与返回值无关)叫做重写(覆盖), 顾名思义, 把父类的方法重写了. 所以怎么转换, 都是子类的方法.","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"String.split()分割字符串用法","slug":"字符串分割split","date":"2018-12-30T02:49:33.000Z","updated":"2019-01-01T07:38:22.042Z","comments":true,"path":"2018/12/30/字符串分割split/","link":"","permalink":"http://yoursite.com/2018/12/30/字符串分割split/","excerpt":"","text":"split方法的参数是一个正则表达式，因此遇到正则表达式中的元字符需要进行转义，而java中的特殊字符也需要转义，因此，分隔的字符既是java特殊字符也是元字符就需要二次转义才能正确分割字符串。 1.public string[] split(string regex)这里的参数的名称是 regex ，也就是 regular expression （正则表达式）。这个参数并不是一个简单的分割用的字符，而是一个正则表达式，它对一些特殊的字符可能会出现你预想不到的结果，比如测试下面的代码： （1） 用竖线 | 分隔字符串，你将得不到预期的结果 ​ String[] aa = “aaa|bbb|ccc”.split(“|”); //String[] aa = “aaa|bbb|ccc”.split(“\\\\|”); 这样才能得到正确的结果 for (int i = 0 ; i &lt;aa.length ; i++ ) { System.out.println(“–”+aa); } （2）用竖 * 分隔字符串运行将抛出java.util.regex.PatternSyntaxException异常，用加号 + 也是如此。 ​ String[] aa = “aaabbbccc”.split(“*“); //String[] aa = “aaa|bbb|ccc”.split(“\\\\*”); 这样才能得到正确的结果 for (int i = 0 ; i &lt;aa.length ; i++ ) { System.out.println(“–”+aa);} （3）显然，+ 不是有效的模式匹配规则表达式，用”\\\\“ “\\\\+”转义后即可得到正确的结果。 （4） “|” 分隔串时虽然能够执行，但是却不是预期的目的，”\\\\|”转义后即可得到正确的结果。 （5）还有如果想在串中使用”\\“字符，则也需要转义.首先要表达”aaaa\\bbbb”这个串就应该用”aaaa\\\\bbbb”,如果要分隔就应该这样才能得到正确结果： String[] aa = “aaa\\\\bbb\\\\bccc”.split(“\\\\\\\\“); （6） 还有就是点号”.”，也要首先转义才能得到正确的结果。 2、public String[] split(String regex,int limit)​ 根据匹配给定的正则表达式来拆分此字符串。 此方法返回的数组包含此字符串的每个子字符串，这些子字符串由另一个匹配给定的表达式的子字符串终止或由字符串结束来终止。数组中的子字符串按它们在此字符串中的顺序排列。如果表达式不匹配输入的任何部分，则结果数组只具有一个元素，即此字符串。 3.”|”作为连字符的使用如果在一个字符串中有多个分隔符，可以用”|作为连字符，比如：”acount=? and uu =? or n=?”,把三个都分隔出来，可以用 “acount=? and uu =? or n=?”.split(“and|or”);","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"保存和获取cookie中的中文信息","slug":"对cookie中的中文处理","date":"2018-12-29T02:46:17.000Z","updated":"2019-01-01T07:25:40.468Z","comments":true,"path":"2018/12/29/对cookie中的中文处理/","link":"","permalink":"http://yoursite.com/2018/12/29/对cookie中的中文处理/","excerpt":"","text":"1.保存cookie问题： 出现500错误 解决：设置字符编码 Cookie cookie=new Cookie(“test”,URLEncoder.encode(“中文”,”utf-8”)); 2.获取cookie 问题：出现乱码 解决：设置字符解码 System.out.println(“cookie:”+cookies[i].getName()+”:”+URLDecoder.decode(cookies[i].getValue()))；","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://yoursite.com/categories/Web开发/"}],"tags":[{"name":"乱码","slug":"乱码","permalink":"http://yoursite.com/tags/乱码/"},{"name":"Web","slug":"Web","permalink":"http://yoursite.com/tags/Web/"}]},{"title":"请求转发与重定向的理解","slug":"请求转发与重定向","date":"2018-12-28T08:37:58.000Z","updated":"2019-01-01T07:24:58.008Z","comments":true,"path":"2018/12/28/请求转发与重定向/","link":"","permalink":"http://yoursite.com/2018/12/28/请求转发与重定向/","excerpt":"","text":"1.forward（转发）是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,因为这个跳转过程实在服务器实现的，并不是在客户端实现的所以客户端并不知道这个跳转动作，所以它的地址栏还是原来的地址. 2.redirect（重定向）是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL. 区别：转发是服务器行为，重定向是客户端行为。 1 )请求转发只能将请求转发给同一个WEB应用中的组件，而重定向还可以重新定向到同一站点不同应用程序中的资源，甚至可以定向到一绝对的URL。 2)重定向可以看见目标页面的URL，转发只能看见第一次访问的页面URL，以后的工作都是有服 务器来做的。 3) 请求响应调用者和被调用者之间共享相同的request对象和response对象，重定向调用者和被调用者属于两个独立访问请求和响应过程。 4)请求重定向：不加/是相对于本servlet所在请求的目录，加“/”表示端口号后面的根目录 http：//localhost:8080/ 请求转发：不加/是相对于本servlet，加/表示web应用的根目录http：//localhost:8080/Test/ ———path”/“路径——— —–只要是需要通过浏览器发送请求的地方（比如html代码，sendRedirect方法等）“/“一般代表虚拟主机根目录，即相当于端口号之后的“/”，例：http：//localhost:8080/ ——服务器程序内部跳转，“/”一般代表本web应用的根目录，如请求转发。例：http：//localhost:8080/Test/","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://yoursite.com/categories/Web开发/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/tags/Web/"}]},{"title":"servlet的乱码问题","slug":"sevlet中的乱码","date":"2018-12-28T02:00:47.000Z","updated":"2019-01-01T07:25:54.114Z","comments":true,"path":"2018/12/28/sevlet中的乱码/","link":"","permalink":"http://yoursite.com/2018/12/28/sevlet中的乱码/","excerpt":"","text":"1.post请求1）html、jsp等页面编码格式1pageEncoding=&quot;UTF-8&quot; 2）设置请求信息的的解码格式1req.setCharacterEncoding(&quot;utf-8&quot;); 3）设置响应信息的编码格式1resp.setCharacterEncoding(&quot;utf-8&quot;); 4）设置浏览器的解码格式1resp.setContentType(&quot;text/html;charset=utf-8&quot;); 2.get请求​ 同post请求所有要求再加上 1) 1） 配置tomcat的server.xml​ 在 &lt;Connector connectionTimeout=”20000” port=”8080” ​ protocol=”HTTP/1.1” redirectPort=”8443”/&gt; ​ 中加入 useBodyEncodingForURI=”true” ​ 加入后&lt;Connector connectionTimeout=”20000” port=”8080” ​ protocol=”HTTP/1.1” redirectPort=”8443” ​ useBodyEncodingForURI=”true”/&gt;","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://yoursite.com/categories/Web开发/"}],"tags":[{"name":"乱码","slug":"乱码","permalink":"http://yoursite.com/tags/乱码/"},{"name":"Web","slug":"Web","permalink":"http://yoursite.com/tags/Web/"}]},{"title":"change themes","slug":"修改主题","date":"2018-10-12T10:51:13.000Z","updated":"2019-01-01T07:44:54.421Z","comments":true,"path":"2018/10/12/修改主题/","link":"","permalink":"http://yoursite.com/2018/10/12/修改主题/","excerpt":"","text":"1.获取主题cd themes 再将yilia主题clone至themes文件夹中 git clone https://github.com/litten/hexo-theme-yilia.git yilia 2.配置：修改hexo根目录下的_config.yml theme:yilia 3.更新:12cd themes/yiliagit pull 4.发布12hexo cleanhexo d -g","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}],"tags":[{"name":"配置","slug":"配置","permalink":"http://yoursite.com/tags/配置/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-10-11T14:51:01.594Z","updated":"2018-10-11T14:51:01.594Z","comments":true,"path":"2018/10/11/hello-world/","link":"","permalink":"http://yoursite.com/2018/10/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}